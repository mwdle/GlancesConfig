---
- name: Deploy and Configure Glances
  hosts: "{{ target_host }}"
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Fail if required variables are not provided
      ansible.builtin.fail:
        msg: "The 'target_host' and 'glances_pass' variables must be set. Use -e 'target_host=... glances_pass=...'"
      when: glances_pass == "" or target_host == ""

    - name: Create a dedicated system user for Glances
      ansible.builtin.user:
        name: glances
        system: yes
        create_home: yes
        home: /home/glances
        shell: /usr/sbin/nologin

    - name: Update apt cache (Debian-based systems)
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      changed_when: false

    - name: Install Glances using the native package manager
      ansible.builtin.package:
        name: glances
        state: present

    - name: Install pexpect for the expect module
      ansible.builtin.package:
        name: python3-pexpect
        state: present

    - name: Ensure any old Glances config is removed
      become_user: glances
      ansible.builtin.file:
        path: /home/glances/.config/glances
        state: absent

    # Glances does not have a non-interactive password set command.
    # We must generate the password file as root, then move and secure it.
    - name: Set glances password non-interactively
      become_user: glances
      ansible.builtin.expect:
        command: "glances -s --password"
        responses:
          # Use simple, unique substrings instead of complex regex
          "Define the Glances server password": "{{ glances_pass }}"
          "Password (confirm)": "{{ glances_pass }}"
          "save the password? [Yes/No]": "Yes"
        timeout: 15
      # no_log: true # Prevents the password from appearing in logs

    - name: Create Systemd unit file
      ansible.builtin.copy:
        dest: /etc/systemd/system/glances.service
        owner: root
        group: root
        mode: "0644"
        content: |
          [Unit]
          Description=Glances Monitoring Tool
          After=network.target

          [Service]
          ExecStart=/usr/bin/glances -s --password
          Restart=always
          RemainAfterExit=no
          User=glances
          Group=glances

          [Install]
          WantedBy=multi-user.target
      notify: Restart Glances

    - name: Ensure Glances service is running and enabled on boot
      ansible.builtin.systemd:
        name: glances
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: Restart Glances
      ansible.builtin.systemd:
        name: glances
        state: restarted
