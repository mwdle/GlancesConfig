---
- name: Deploy and Configure Glances
  hosts: "{{ target_host }}"
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3

  pre_tasks:
    - name: Verify that the 'glances_pass' variable is provided and not empty
      ansible.builtin.assert:
        that:
          - glances_pass is defined
          - glances_pass | length > 0
        fail_msg: "The 'glances_pass' variable is required. Use -e 'glances_pass=...'"
      run_once: true # Ensures this check runs only one time, not on every host

  tasks:
    - name: Create a dedicated system user for Glances
      ansible.builtin.user:
        name: glances
        system: yes
        create_home: yes
        home: /home/glances
        shell: /usr/sbin/nologin

    - name: Install prerequisite packages
      ansible.builtin.apt:
        name:
          - build-essential
          - python3-dev
          - pipx
          - acl
          - python3-pexpect
        state: present
        update_cache: yes
        cache_valid_time: 86400

    - name: Install Glances using pipx
      become_user: glances
      ansible.builtin.command:
        cmd: "pipx install 'glances[all]'"
        creates: /home/glances/.local/bin/glances

    - name: Ensure any old glances password file is removed
      become: yes
      ansible.builtin.file:
        path: /home/glances/.config/glances/glances.pwd
        state: absent

    - name: Generate the glances.pwd files
      become_user: glances
      ansible.builtin.expect:
        command: "/home/glances/.local/bin/glances -w --password"
        responses:
          ".*Glances .*server password.*": "{{ glances_pass }}"
          ".*Password.*": "{{ glances_pass }}"
          ".*save the password?.*": "Yes"
          ".*": "\x03"
        timeout: 120 # Long timeout provides better support for resource-limited systems that can take quite some time to hash the password.

    - name: Create Systemd unit file
      ansible.builtin.copy:
        dest: /etc/systemd/system/glances.service
        owner: root
        group: root
        mode: "0644"
        content: |
          [Unit]
          Description=Glances Monitoring Tool
          After=network.target

          [Service]
          WorkingDirectory=/home/glances
          # For single core systems, it can be useful to strictly limit the refresh/polling rate for statistics to avoid overloading the CPU for the purpose of taking measurements.
          # In this case, the polling rate is set to 15 seconds.
          ExecStart=/home/glances/.local/bin/glances -w -B 0.0.0.0 --password -t 15
          Restart=always
          RemainAfterExit=no
          User=glances
          Group=glances

          [Install]
          WantedBy=multi-user.target
      notify: Restart Glances

    - name: Ensure Glances service is running and enabled on boot
      ansible.builtin.systemd:
        name: glances
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Force handler to run immediately
      ansible.builtin.meta: flush_handlers

    - name: Verify that the Glances web service is responding
      ansible.builtin.uri:
        url: "http://localhost:61208"
        method: GET
        status_code: 200
        user: glances
        password: "{{ glances_pass }}"
        force_basic_auth: yes
      register: glances_health_check
      until: glances_health_check.status == 200
      retries: 5
      delay: 3

  handlers:
    - name: Restart Glances
      ansible.builtin.systemd:
        name: glances
        state: restarted
